{"version":3,"file":"static/5944.d9f1fb44.chunk.js","mappings":"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","sources":["webpack://app/../../node_modules/@graphiql/react/dist/comment.es.js"],"sourcesContent":["import { g as getDefaultExportFromCjs, r as requireCodemirror } from \"./codemirror.es2.js\";\nfunction _mergeNamespaces(n, m) {\n  for (var i = 0; i < m.length; i++) {\n    const e = m[i];\n    if (typeof e !== \"string\" && !Array.isArray(e)) {\n      for (const k in e) {\n        if (k !== \"default\" && !(k in n)) {\n          const d = Object.getOwnPropertyDescriptor(e, k);\n          if (d) {\n            Object.defineProperty(n, k, d.get ? d : {\n              enumerable: true,\n              get: () => e[k]\n            });\n          }\n        }\n      }\n    }\n  }\n  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: \"Module\" }));\n}\nvar comment$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(requireCodemirror());\n  })(function(CodeMirror) {\n    var noOptions = {};\n    var nonWS = /[^\\s\\u00a0]/;\n    var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n    function firstNonWS(str) {\n      var found = str.search(nonWS);\n      return found == -1 ? 0 : found;\n    }\n    CodeMirror.commands.toggleComment = function(cm) {\n      cm.toggleComment();\n    };\n    CodeMirror.defineExtension(\"toggleComment\", function(options) {\n      if (!options) options = noOptions;\n      var cm = this;\n      var minLine = Infinity, ranges = this.listSelections(), mode = null;\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var from = ranges[i].from(), to = ranges[i].to();\n        if (from.line >= minLine) continue;\n        if (to.line >= minLine) to = Pos(minLine, 0);\n        minLine = from.line;\n        if (mode == null) {\n          if (cm.uncomment(from, to, options)) mode = \"un\";\n          else {\n            cm.lineComment(from, to, options);\n            mode = \"line\";\n          }\n        } else if (mode == \"un\") {\n          cm.uncomment(from, to, options);\n        } else {\n          cm.lineComment(from, to, options);\n        }\n      }\n    });\n    function probablyInsideString(cm, pos, line) {\n      return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line);\n    }\n    function getMode(cm, pos) {\n      var mode = cm.getMode();\n      return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos);\n    }\n    CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n      if (!options) options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var firstLine = self.getLine(from.line);\n      if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n      var commentString = options.lineComment || mode.lineComment;\n      if (!commentString) {\n        if (options.blockCommentStart || mode.blockCommentStart) {\n          options.fullLines = true;\n          self.blockComment(from, to, options);\n        }\n        return;\n      }\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n      var pad = options.padding == null ? \" \" : options.padding;\n      var blankLines = options.commentBlankLines || from.line == to.line;\n      self.operation(function() {\n        if (options.indent) {\n          var baseString = null;\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i);\n            var whitespace = line.slice(0, firstNonWS(line));\n            if (baseString == null || baseString.length > whitespace.length) {\n              baseString = whitespace;\n            }\n          }\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i), cut = baseString.length;\n            if (!blankLines && !nonWS.test(line)) continue;\n            if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n            self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n          }\n        } else {\n          for (var i = from.line; i < end; ++i) {\n            if (blankLines || nonWS.test(self.getLine(i)))\n              self.replaceRange(commentString + pad, Pos(i, 0));\n          }\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n      if (!options) options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString) {\n        if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n          self.lineComment(from, to, options);\n        return;\n      }\n      if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return;\n      var end = Math.min(to.line, self.lastLine());\n      if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n      var pad = options.padding == null ? \" \" : options.padding;\n      if (from.line > end) return;\n      self.operation(function() {\n        if (options.fullLines != false) {\n          var lastLineHasText = nonWS.test(self.getLine(end));\n          self.replaceRange(pad + endString, Pos(end));\n          self.replaceRange(startString + pad, Pos(from.line, 0));\n          var lead = options.blockCommentLead || mode.blockCommentLead;\n          if (lead != null) {\n            for (var i = from.line + 1; i <= end; ++i)\n              if (i != end || lastLineHasText)\n                self.replaceRange(lead + pad, Pos(i, 0));\n          }\n        } else {\n          var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected();\n          self.replaceRange(endString, to);\n          if (atCursor) self.setSelection(empty ? to : self.getCursor(\"from\"), to);\n          self.replaceRange(startString, from);\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n      if (!options) options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n      var lineString = options.lineComment || mode.lineComment, lines = [];\n      var pad = options.padding == null ? \" \" : options.padding, didSomething;\n      lineComment: {\n        if (!lineString) break lineComment;\n        for (var i = start; i <= end; ++i) {\n          var line = self.getLine(i);\n          var found = line.indexOf(lineString);\n          if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n          if (found == -1 && nonWS.test(line)) break lineComment;\n          if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n          lines.push(line);\n        }\n        self.operation(function() {\n          for (var i2 = start; i2 <= end; ++i2) {\n            var line2 = lines[i2 - start];\n            var pos = line2.indexOf(lineString), endPos = pos + lineString.length;\n            if (pos < 0) continue;\n            if (line2.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n            didSomething = true;\n            self.replaceRange(\"\", Pos(i2, pos), Pos(i2, endPos));\n          }\n        });\n        if (didSomething) return true;\n      }\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString) return false;\n      var lead = options.blockCommentLead || mode.blockCommentLead;\n      var startLine = self.getLine(start), open = startLine.indexOf(startString);\n      if (open == -1) return false;\n      var endLine = end == start ? startLine : self.getLine(end);\n      var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n      var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1);\n      if (close == -1 || !/comment/.test(self.getTokenTypeAt(insideStart)) || !/comment/.test(self.getTokenTypeAt(insideEnd)) || self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n        return false;\n      var lastStart = startLine.lastIndexOf(startString, from.ch);\n      var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n      if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n      firstEnd = endLine.indexOf(endString, to.ch);\n      var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n      lastStart = firstEnd == -1 || almostLastStart == -1 ? -1 : to.ch + almostLastStart;\n      if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n      self.operation(function() {\n        self.replaceRange(\n          \"\",\n          Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n          Pos(end, close + endString.length)\n        );\n        var openEnd = open + startString.length;\n        if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n        self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n        if (lead) for (var i2 = start + 1; i2 <= end; ++i2) {\n          var line2 = self.getLine(i2), found2 = line2.indexOf(lead);\n          if (found2 == -1 || nonWS.test(line2.slice(0, found2))) continue;\n          var foundEnd = found2 + lead.length;\n          if (pad && line2.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n          self.replaceRange(\"\", Pos(i2, found2), Pos(i2, foundEnd));\n        }\n      });\n      return true;\n    });\n  });\n})();\nvar commentExports = comment$2.exports;\nconst comment = /* @__PURE__ */ getDefaultExportFromCjs(commentExports);\nconst comment$1 = /* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  default: comment\n}, [commentExports]);\nexport {\n  comment$1 as c\n};\n//# sourceMappingURL=comment.es.js.map\n"],"names":["_mergeNamespaces","n","m","i","e","k","d","comment$2","module","exports","mod","CodeMirror","noOptions","nonWS","Pos","cmp","firstNonWS","str","found","cm","options","minLine","ranges","mode","from","to","probablyInsideString","pos","line","getMode","self","firstLine","commentString","end","pad","blankLines","baseString","whitespace","cut","startString","endString","lastLineHasText","lead","atCursor","empty","start","lineString","lines","didSomething","lineComment","i2","line2","endPos","startLine","open","endLine","close","insideStart","insideEnd","lastStart","firstEnd","almostLastStart","openEnd","found2","foundEnd","commentExports","comment$1"],"sourceRoot":""}