{"version":3,"file":"static/5019.6a1f9e0c.chunk.js","mappings":"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","sources":["webpack://app/../../node_modules/@graphiql/react/dist/brace-fold.es.js"],"sourcesContent":["import { g as getDefaultExportFromCjs, r as requireCodemirror } from \"./codemirror.es2.js\";\nfunction _mergeNamespaces(n, m) {\n  for (var i = 0; i < m.length; i++) {\n    const e = m[i];\n    if (typeof e !== \"string\" && !Array.isArray(e)) {\n      for (const k in e) {\n        if (k !== \"default\" && !(k in n)) {\n          const d = Object.getOwnPropertyDescriptor(e, k);\n          if (d) {\n            Object.defineProperty(n, k, d.get ? d : {\n              enumerable: true,\n              get: () => e[k]\n            });\n          }\n        }\n      }\n    }\n  }\n  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: \"Module\" }));\n}\nvar braceFold$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(requireCodemirror());\n  })(function(CodeMirror) {\n    function bracketFolding(pairs) {\n      return function(cm, start) {\n        var line = start.line, lineText = cm.getLine(line);\n        function findOpening(pair) {\n          var tokenType;\n          for (var at = start.ch, pass = 0; ; ) {\n            var found2 = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n            if (found2 == -1) {\n              if (pass == 1) break;\n              pass = 1;\n              at = lineText.length;\n              continue;\n            }\n            if (pass == 1 && found2 < start.ch) break;\n            tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found2 + 1));\n            if (!/^(comment|string)/.test(tokenType)) return { ch: found2 + 1, tokenType, pair };\n            at = found2 - 1;\n          }\n        }\n        function findRange(found2) {\n          var count = 1, lastLine = cm.lastLine(), end, startCh = found2.ch, endCh;\n          outer: for (var i2 = line; i2 <= lastLine; ++i2) {\n            var text = cm.getLine(i2), pos = i2 == line ? startCh : 0;\n            for (; ; ) {\n              var nextOpen = text.indexOf(found2.pair[0], pos), nextClose = text.indexOf(found2.pair[1], pos);\n              if (nextOpen < 0) nextOpen = text.length;\n              if (nextClose < 0) nextClose = text.length;\n              pos = Math.min(nextOpen, nextClose);\n              if (pos == text.length) break;\n              if (cm.getTokenTypeAt(CodeMirror.Pos(i2, pos + 1)) == found2.tokenType) {\n                if (pos == nextOpen) ++count;\n                else if (!--count) {\n                  end = i2;\n                  endCh = pos;\n                  break outer;\n                }\n              }\n              ++pos;\n            }\n          }\n          if (end == null || line == end) return null;\n          return {\n            from: CodeMirror.Pos(line, startCh),\n            to: CodeMirror.Pos(end, endCh)\n          };\n        }\n        var found = [];\n        for (var i = 0; i < pairs.length; i++) {\n          var open = findOpening(pairs[i]);\n          if (open) found.push(open);\n        }\n        found.sort(function(a, b) {\n          return a.ch - b.ch;\n        });\n        for (var i = 0; i < found.length; i++) {\n          var range = findRange(found[i]);\n          if (range) return range;\n        }\n        return null;\n      };\n    }\n    CodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n    CodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n    CodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n      function hasImport(line) {\n        if (line < cm.firstLine() || line > cm.lastLine()) return null;\n        var start2 = cm.getTokenAt(CodeMirror.Pos(line, 1));\n        if (!/\\S/.test(start2.string)) start2 = cm.getTokenAt(CodeMirror.Pos(line, start2.end + 1));\n        if (start2.type != \"keyword\" || start2.string != \"import\") return null;\n        for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n          var text = cm.getLine(i), semi = text.indexOf(\";\");\n          if (semi != -1) return { startCh: start2.end, end: CodeMirror.Pos(i, semi) };\n        }\n      }\n      var startLine = start.line, has = hasImport(startLine), prev;\n      if (!has || hasImport(startLine - 1) || (prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1)\n        return null;\n      for (var end = has.end; ; ) {\n        var next = hasImport(end.line + 1);\n        if (next == null) break;\n        end = next.end;\n      }\n      return { from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end };\n    });\n    CodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n      function hasInclude(line) {\n        if (line < cm.firstLine() || line > cm.lastLine()) return null;\n        var start2 = cm.getTokenAt(CodeMirror.Pos(line, 1));\n        if (!/\\S/.test(start2.string)) start2 = cm.getTokenAt(CodeMirror.Pos(line, start2.end + 1));\n        if (start2.type == \"meta\" && start2.string.slice(0, 8) == \"#include\") return start2.start + 8;\n      }\n      var startLine = start.line, has = hasInclude(startLine);\n      if (has == null || hasInclude(startLine - 1) != null) return null;\n      for (var end = startLine; ; ) {\n        var next = hasInclude(end + 1);\n        if (next == null) break;\n        ++end;\n      }\n      return {\n        from: CodeMirror.Pos(startLine, has + 1),\n        to: cm.clipPos(CodeMirror.Pos(end))\n      };\n    });\n  });\n})();\nvar braceFoldExports = braceFold$2.exports;\nconst braceFold = /* @__PURE__ */ getDefaultExportFromCjs(braceFoldExports);\nconst braceFold$1 = /* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  default: braceFold\n}, [braceFoldExports]);\nexport {\n  braceFold$1 as b\n};\n//# sourceMappingURL=brace-fold.es.js.map\n"],"names":["_mergeNamespaces","n","m","i","e","k","d","braceFold$2","module","exports","mod","CodeMirror","bracketFolding","pairs","cm","start","line","lineText","findOpening","pair","tokenType","at","pass","found2","findRange","count","lastLine","end","startCh","endCh","outer","i2","text","pos","nextOpen","nextClose","found","open","a","b","range","hasImport","start2","semi","startLine","has","prev","next","hasInclude","braceFoldExports","braceFold$1"],"sourceRoot":""}